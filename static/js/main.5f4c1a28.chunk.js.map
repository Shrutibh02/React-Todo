{"version":3,"sources":["serviceWorker.js","components/TodoItem.js","components/TodosList.js","components/Header.js","components/InputTodo.js","components/TodoContainer.js","index.js"],"names":["Boolean","window","location","hostname","match","TodoItem","className","type","checked","this","props","todo","completed","onChange","handleChangeProps","id","onClick","deleteTodoProps","style","fontStyle","color","opacity","textDecoration","title","React","Component","TodosList","todos","map","key","Header","padding","lineHeight","fontSize","marginBottom","InputTodo","state","e","setState","target","name","value","handleSubmit","preventDefault","addTodoProps","onSubmit","placeholder","TodoContainer","uuidv4","handleChange","delTodo","filter","addTodoItem","newTodo","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.5f4c1a28.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\"\r\n\r\nclass TodoItem extends React.Component {\r\n\r\n    render() {\r\n        const completedStyle = {\r\n            fontStyle: \"italic\",\r\n            color: \"#d35e0f\",\r\n            opacity: 0.4,\r\n            textDecoration: \"line-through\",\r\n        }\r\n        return (\r\n            <li className=\"todo-item\">\r\n                <input\r\n                    type=\"checkbox\"\r\n                    checked={this.props.todo.completed}\r\n                    onChange={() => this.props.handleChangeProps(this.props.todo.id)}\r\n                />\r\n                {/* <button style={{backgroundColor:'grey', border:'1px solid grey'}} onClick={() => this.props.deleteTodoProps(this.props.todo.id)}>\r\n                    Edit\r\n            </button> */}\r\n                <button onClick={() => this.props.deleteTodoProps(this.props.todo.id)}>\r\n                    Delete\r\n            </button>\r\n                <span style={this.props.todo.completed ? completedStyle : null}>\r\n                    {this.props.todo.title}\r\n                </span>\r\n                {/* {this.props.todo.title} */}\r\n            </li>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TodoItem","import React from \"react\"\r\nimport TodoItem from \"./TodoItem\";\r\nclass TodosList extends React.Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        {this.props.todos.map(todo => (\r\n        //   <li>{todo.title}</li>\r\n        // <li key={todo.id}>{todo.title}</li>\r\n        <TodoItem \r\n        key={todo.id} \r\n        todo={todo}  \r\n        handleChangeProps={this.props.handleChangeProps}\r\n        deleteTodoProps={this.props.deleteTodoProps}\r\n        />\r\n        ))}\r\n        {/* <TodoItem key={todo.id} todo={todo} /> */}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default TodosList","import React from \"react\"\r\n\r\nconst Header = () => {\r\n  const headerStyle = {\r\n    padding: \"20px 0\",\r\n    lineHeight: \"2em\",\r\n  }\r\n  return (\r\n    <header style={headerStyle}>\r\n      <h1 style={{ fontSize: \"25px\", marginBottom: \"15px\" }}>\r\n        Simple Todo App\r\n      </h1>\r\n      <p style={{ fontSize: \"19px\" }}>\r\n        Please add to-dos item(s) through the input field\r\n      </p>\r\n    </header>\r\n  )\r\n}\r\n\r\nexport default Header","import React, { Component } from \"react\"\r\n\r\nclass InputTodo extends Component {\r\n  state = {\r\n    title: \"\",\r\n  }\r\n  onChange = e => {\r\n    this.setState({\r\n      [e.target.name]: e.target.value,\r\n    })\r\n  }\r\n  handleSubmit = e => {\r\n    e.preventDefault();\r\n    this.props.addTodoProps(this.state.title);\r\n    this.setState({\r\n      title: \"\"\r\n    });\r\n  }\r\n  render() {\r\n    return (\r\n      <form  onSubmit={this.handleSubmit}  className=\"form-container\">\r\n        <input\r\n          className=\"input-text\"\r\n          type=\"text\"\r\n          placeholder=\"Add todo...\"\r\n          value={this.state.title}\r\n          name=\"title\"\r\n          onChange={this.onChange}\r\n        />\r\n        <input type=\"submit\" className=\"input-submit\" value=\"Submit\" />\r\n      </form>\r\n    )\r\n  }\r\n}\r\nexport default InputTodo","import React from \"react\"\r\nimport TodosList from \"./TodosList\";\r\nimport Header from \"./Header\";\r\nimport InputTodo from \"./InputTodo\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nclass TodoContainer extends React.Component {\r\n    state = {\r\n        todos: [\r\n            {\r\n                id: uuidv4(),\r\n                title: \"Setup development environment\",\r\n                completed: true\r\n            },\r\n            {\r\n                id: uuidv4(),\r\n                title: \"Develop website and add content\",\r\n                completed: false\r\n            },\r\n            {\r\n                id: uuidv4(),\r\n                title: \"Deploy to live server\",\r\n                completed: true\r\n            }\r\n        ]\r\n    };\r\n    handleChange = id => {\r\n        this.setState({\r\n            todos: this.state.todos.map(todo => {\r\n                if (todo.id === id) {\r\n                    todo.completed = !todo.completed;\r\n                }\r\n                return todo;\r\n            })\r\n        });\r\n    };\r\n    delTodo = id => {\r\n        this.setState({\r\n            todos: [\r\n                ...this.state.todos.filter(todo => {\r\n                    return todo.id !== id;\r\n                })\r\n            ]\r\n        });\r\n    };\r\n    addTodoItem = title => {\r\n        const newTodo = {\r\n            id: uuidv4(),\r\n            title: title,\r\n            completed: false\r\n        };\r\n        this.setState({\r\n            todos: [...this.state.todos, newTodo]\r\n        });\r\n    };\r\n    render() {\r\n        return (\r\n            // <React.Fragment>\r\n            <div className=\"container\">\r\n                {/* {this.state.todos.map(todo => (\r\n                    <li>{todo.title}</li>\r\n                ))} */}\r\n                <Header />\r\n                {/* <InputTodo /> */}\r\n                <InputTodo addTodoProps={this.addTodoItem} />\r\n                <TodosList todos={this.state.todos} handleChangeProps={this.handleChange} deleteTodoProps={this.delTodo} />\r\n            </div>\r\n            // {/* </React.Fragment> */}\r\n        )\r\n    }\r\n}\r\n\r\nexport default TodoContainer","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n// import App from './App';\nimport * as serviceWorker from './serviceWorker';\n//component file\nimport TodoContainer from \"./components/TodoContainer\";\nimport \"./App.css\"\nReactDOM.render(<TodoContainer />, document.getElementById(\"root\"))\n// ReactDOM.render(\n//   <React.StrictMode>\n//     <App />\n//   </React.StrictMode>,\n//   document.getElementById('root')\n// );\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}